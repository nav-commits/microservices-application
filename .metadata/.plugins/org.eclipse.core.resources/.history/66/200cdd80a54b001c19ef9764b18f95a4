package com.example.demo;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;


@RestController
public class TransactionController {

	@Autowired
	private RestTemplate restTemplate;

	// will have the crud functionality
	@Autowired
	TransactionRepository transactionRepository;

	// get Purchases from a product
	@GetMapping("/Transactions/{userid}")
	@HystrixCommand(fallbackMethod = "getFallbackTransaction")
	public List<Transactions> Transactions(@PathVariable Long userid) {

		// step 1 get product pricing
		String uriProductPricing = "http://Product-Pricing-Service/ProductPricing/" + userid;
		UsersProductsPricing usersProductsPricing = restTemplate.getForObject(uriProductPricing,
				UsersProductsPricing.class);

		// step 2 get pricing and product info for each user
		return usersProductsPricing.getUsersProductsPricing().stream().map(productpricing -> {
			ProductInfo productinfo = restTemplate.getForObject(
					"http://Product-Info-Service/ProductInfo/" + productpricing.getProductid(), ProductInfo.class);
			return new Transactions(productinfo.getImageurl(), productinfo.getProductname(), productinfo.getQuantity(),productinfo.getProductid(),productinfo.getPrice());
		}).collect(Collectors.toList());

	}
	
	
	public List<Transactions> getFallbackTransaction(@PathVariable Long userid) {
		return Arrays.asList(new Transactions("no images","no product name", 0));
	}




}
