package com.example.demo;



import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.bind.annotation.RequestBody;

@CrossOrigin(origins="http://localhost:3000")
@RestController
public class ProductsInfoController {

	
	@Autowired
	ProductInfoRepository productInfoRepository;
	
	@Autowired
	private RestTemplate restTemplate;
	

	// get product pricing by productid
	@GetMapping("/ProductInfo/{userid}")
	public List<ProductInfo> getProductPrice(@PathVariable int userid) {

		//ProductInfo productinfo = getProductInfo(productpricing.getProductid());
//		ProductInfo productinfo = productinfoList.get(0);
		
		 //new ArrayList<ProductInfo>();
//		 List<ProductInfo> productinfoList = productinfoList = getProductInfoAll();
		
		//productinfoList = getProductInfoAll();
		//productinfoList.initData(userId);
		//return productinfoList;
		
	    ProductInfo productinfodata = new ProductInfo();
	    productinfodata.setImageurl("hello");
	    productinfodata.setImageurl("jello");
	    productinfodata.setQuantity(1);
	    productinfodata.setPrice(1);
	    productinfodata.setProductname("Gucci");
	    productinfodata.setProductname("bob");
		 
		
		
		// step 1 get product pricing
		String uriProductPricing = "http://localhost:8084/ProductPricing/" + userid;
		UsersProductsPricing usersProductsPricing = restTemplate.getForObject(uriProductPricing, UsersProductsPricing.class);	
		

		// step 2 loop over usersProductPricing array and get the price
		return usersProductsPricing.getUsersProductsPricing().stream().map(productpricing -> {
		return productInfoRepository.save(new ProductInfo(productpricing.getProductid(),productinfodata.getImageurl(),productinfodata.getProductname(), productinfodata.getQuantity(), productpricing.getPrice()));
		}).collect(Collectors.toList());
		
	}
	
	
	
	// find a productinfo by productid
	@GetMapping("/Product/ProductInfo/{productid}")
	public ProductInfo getProductInfo(@PathVariable Long productid) {
		System.out.println("Product ID:" + productid);
		return productInfoRepository.findById(productid).orElse(null);
		
	}
	


}
